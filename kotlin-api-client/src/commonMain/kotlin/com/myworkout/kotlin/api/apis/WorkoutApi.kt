/**
* Myworkout API
* Documentation for Myworkout API 2.  Basic concepts are explained in this section.  # Localization The API supports localization for error messages like validation errors. The preferred way to request language is to set proper `Accept-Language` header, but this can be overriden by adding a `lang` query parameter to the request.  - _Example 1_: `Accept-Language: no` - _Example 2_: `en-GB,en-US;q=0.9,en;q=0.8` 
*
* The version of the OpenAPI document: <%= ENV[\"API_VERSION\"] %>
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.myworkout.kotlin.api.apis

import com.myworkout.kotlin.api.models.AddWorkoutResponse
import com.myworkout.kotlin.api.models.CreateWorkoutInput
import com.myworkout.kotlin.api.models.Error
import com.myworkout.kotlin.api.models.GetWorkoutResponse
import com.myworkout.kotlin.api.models.GetWorkoutTimeseriesResponse
import com.myworkout.kotlin.api.models.GetWorkoutsResponse
import com.myworkout.kotlin.api.models.PatchWorkoutInput
import com.myworkout.kotlin.api.models.PutWorkoutAltitudesInput
import com.myworkout.kotlin.api.models.PutWorkoutHeartRatesInput
import com.myworkout.kotlin.api.models.PutWorkoutLocationsInput
import com.myworkout.kotlin.api.models.UpdateWorkoutInput
import com.myworkout.kotlin.api.models.UpdateWorkoutResponse
import com.myworkout.kotlin.api.models.WorkoutHeartRatesResponse

import com.myworkout.kotlin.api.infrastructure.*
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

class WorkoutApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    jsonSerializer: Json
) : ApiClient(baseUrl, httpClientEngine, jsonSerializer) {

    /**
     * 
     * 
     * @param createWorkoutInput  (optional)
     * @return AddWorkoutResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun addWorkout(createWorkoutInput: CreateWorkoutInput?): HttpResponse<AddWorkoutResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = createWorkoutInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/me/workouts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param workoutId  
     * @return void
     */
    suspend fun deleteWorkout(workoutId: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/me/workouts/{workoutId}".replace("{" + "workoutId" + "}", "$workoutId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param workoutId  
     * @return GetWorkoutResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getWorkout(workoutId: kotlin.String): HttpResponse<GetWorkoutResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/me/workouts/{workoutId}".replace("{" + "workoutId" + "}", "$workoutId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param workoutId  
     * @param sampleRate  (optional)
     * @return WorkoutHeartRatesResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getWorkoutHeartRates(workoutId: kotlin.String, sampleRate: kotlin.String?): HttpResponse<WorkoutHeartRatesResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        sampleRate?.apply { localVariableQuery["sample_rate"] = listOf("$sampleRate") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/me/workouts/{workoutId}/heart-rates".replace("{" + "workoutId" + "}", "$workoutId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param workoutId  
     * @return GetWorkoutTimeseriesResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getWorkoutTimeseries(workoutId: kotlin.String): HttpResponse<GetWorkoutTimeseriesResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/me/workouts/{workoutId}/timeseries".replace("{" + "workoutId" + "}", "$workoutId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param updatedAfter  (optional)
     * @param trashed Filter to retrieve trashed or not trashed workouts (optional)
     * @param perPage  (optional, default to 100)
     * @param page  (optional)
     * @param sort  (optional, default to started_at:desc)
     * @return GetWorkoutsResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getWorkouts(updatedAfter: kotlin.String?, trashed: kotlin.Boolean?, perPage: kotlin.Int?, page: kotlin.Int?, sort: kotlin.String?): HttpResponse<GetWorkoutsResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        updatedAfter?.apply { localVariableQuery["updated_after"] = listOf("$updatedAfter") }
        trashed?.apply { localVariableQuery["trashed"] = listOf("$trashed") }
        perPage?.apply { localVariableQuery["per_page"] = listOf("$perPage") }
        page?.apply { localVariableQuery["page"] = listOf("$page") }
        sort?.apply { localVariableQuery["sort"] = listOf("$sort") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/me/workouts",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param file  (optional)
     * @return void
     */
    suspend fun importTcxWorkout(file: io.ktor.client.request.forms.InputProvider?): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            formData {
                file?.apply { append("file", file) }
            }

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/me/workouts/import/tcx",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return multipartFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param workoutId  
     * @param patchWorkoutInput  (optional)
     * @return UpdateWorkoutResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun patchWorkout(workoutId: kotlin.String, patchWorkoutInput: PatchWorkoutInput?): HttpResponse<UpdateWorkoutResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = patchWorkoutInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PATCH,
            "/me/workouts/{workoutId}".replace("{" + "workoutId" + "}", "$workoutId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * This endpoint supports \&quot;Content-encoding\&quot; with \&quot;Gzip\&quot; and should be used when possible.
     * 
     * @param workoutId  
     * @param putWorkoutAltitudesInput  (optional)
     * @return void
     */
    suspend fun putWorkoutAltitudes(workoutId: kotlin.String, putWorkoutAltitudesInput: PutWorkoutAltitudesInput?): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = putWorkoutAltitudesInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/me/workouts/{workoutId}/altitudes".replace("{" + "workoutId" + "}", "$workoutId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * This endpoint supports \&quot;Content-encoding\&quot; with \&quot;Gzip\&quot; and should be used when possible.
     * 
     * @param workoutId  
     * @param putWorkoutHeartRatesInput  (optional)
     * @return void
     */
    suspend fun putWorkoutHeartRates(workoutId: kotlin.String, putWorkoutHeartRatesInput: PutWorkoutHeartRatesInput?): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = putWorkoutHeartRatesInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/me/workouts/{workoutId}/heart-rates".replace("{" + "workoutId" + "}", "$workoutId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * This endpoint supports \&quot;Content-encoding\&quot; with \&quot;Gzip\&quot; and should be used when possible.
     * 
     * @param workoutId  
     * @param putWorkoutLocationsInput  (optional)
     * @return void
     */
    suspend fun putWorkoutLocations(workoutId: kotlin.String, putWorkoutLocationsInput: PutWorkoutLocationsInput?): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = putWorkoutLocationsInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/me/workouts/{workoutId}/locations".replace("{" + "workoutId" + "}", "$workoutId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param workoutId  
     * @param updateWorkoutInput  (optional)
     * @return UpdateWorkoutResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun updateWorkout(workoutId: kotlin.String, updateWorkoutInput: UpdateWorkoutInput?): HttpResponse<UpdateWorkoutResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = updateWorkoutInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/me/workouts/{workoutId}".replace("{" + "workoutId" + "}", "$workoutId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param workoutId  
     * @return GetWorkoutResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun workoutActionEstimateHealth(workoutId: kotlin.String): HttpResponse<GetWorkoutResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/me/workouts/{workoutId}/actions/estimate-health".replace("{" + "workoutId" + "}", "$workoutId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
