/**
* Myworkout API
* Documentation for Myworkout API 2.  Basic concepts are explained in this section.  # Localization The API supports localization for error messages like validation errors. The preferred way to request language is to set proper `Accept-Language` header, but this can be overriden by adding a `lang` query parameter to the request.  - _Example 1_: `Accept-Language: no` - _Example 2_: `en-GB,en-US;q=0.9,en;q=0.8` 
*
* The version of the OpenAPI document: <%= ENV[\"API_VERSION\"] %>
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.myworkout.kotlin.api.apis

import com.myworkout.kotlin.api.models.ClientGroupMembersResponse
import com.myworkout.kotlin.api.models.ClientGroupResponse
import com.myworkout.kotlin.api.models.ClientGroupsResponse
import com.myworkout.kotlin.api.models.ClientResponse
import com.myworkout.kotlin.api.models.CreateClientGroupInput
import com.myworkout.kotlin.api.models.CreateSharedEvaluationInput
import com.myworkout.kotlin.api.models.Error
import com.myworkout.kotlin.api.models.GetClientWorkoutsResponse
import com.myworkout.kotlin.api.models.SharedEvaluationResponse
import com.myworkout.kotlin.api.models.UpdateClientGroupInput
import com.myworkout.kotlin.api.models.UpdateClientGroupMembersInput

import com.myworkout.kotlin.api.infrastructure.*
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

class InstructorsApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    jsonSerializer: Json
) : ApiClient(baseUrl, httpClientEngine, jsonSerializer) {

    /**
     * 
     * 
     * @param clinic uuid of the clinic 
     * @param createClientGroupInput  (optional)
     * @return ClientGroupResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun createClientGroup(clinic: kotlin.String, createClientGroupInput: CreateClientGroupInput?): HttpResponse<ClientGroupResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = createClientGroupInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/instructors/{clinic}/client-groups".replace("{" + "clinic" + "}", "$clinic"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param clinic uuid of the belonging clinic 
     * @param client uuid of the client 
     * @param createSharedEvaluationInput  (optional)
     * @return SharedEvaluationResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun createSharedEvaluation(clinic: kotlin.String, client: kotlin.String, createSharedEvaluationInput: CreateSharedEvaluationInput?): HttpResponse<SharedEvaluationResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = createSharedEvaluationInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/instructors/{clinic}/clients/{client}/shared-evaluations".replace("{" + "clinic" + "}", "$clinic").replace("{" + "client" + "}", "$client"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param clinic uuid of the clinic 
     * @param clientGroup uuid of the client group 
     * @return void
     */
    suspend fun deleteClientGroup(clinic: kotlin.String, clientGroup: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/instructors/{clinic}/client-groups/{clientGroup}".replace("{" + "clinic" + "}", "$clinic").replace("{" + "clientGroup" + "}", "$clientGroup"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Return the client with the provided id
     * 
     * @param clinic Organization uuid of the clinic 
     * @param client User uuid of the client 
     * @return ClientResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getClient(clinic: kotlin.String, client: kotlin.String): HttpResponse<ClientResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/instructors/{clinic}/clients/{client}".replace("{" + "clinic" + "}", "$clinic").replace("{" + "client" + "}", "$client"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param clinic uuid of the clinic 
     * @return ClientGroupsResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getClientGroups(clinic: kotlin.String): HttpResponse<ClientGroupsResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/instructors/{clinic}/client-groups".replace("{" + "clinic" + "}", "$clinic"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Paginated list of workouts for the provided user (100 per page)
     * 
     * @param clinic Organization id of the clinic 
     * @param client User id of the client 
     * @param page  (optional)
     * @return GetClientWorkoutsResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getClientWorkouts(clinic: kotlin.String, client: kotlin.String, page: kotlin.Int?): HttpResponse<GetClientWorkoutsResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        page?.apply { localVariableQuery["page"] = listOf("$page") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/instructors/{clinic}/clients/{client}/workouts".replace("{" + "clinic" + "}", "$clinic").replace("{" + "client" + "}", "$client"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param clinic uuid of the clinic 
     * @param clientGroup uuid of the client group 
     * @param updateClientGroupInput  (optional)
     * @return ClientGroupResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun updateClientGroup(clinic: kotlin.String, clientGroup: kotlin.String, updateClientGroupInput: UpdateClientGroupInput?): HttpResponse<ClientGroupResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = updateClientGroupInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PATCH,
            "/instructors/{clinic}/client-groups/{clientGroup}".replace("{" + "clinic" + "}", "$clinic").replace("{" + "clientGroup" + "}", "$clientGroup"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param clinic uuid of the clinic 
     * @param clientGroup uuid of the client group 
     * @param updateClientGroupMembersInput  (optional)
     * @return ClientGroupMembersResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun updateClientGroupMembers(clinic: kotlin.String, clientGroup: kotlin.String, updateClientGroupMembersInput: UpdateClientGroupMembersInput?): HttpResponse<ClientGroupMembersResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = updateClientGroupMembersInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PATCH,
            "/instructors/{clinic}/client-groups/{clientGroup}/members".replace("{" + "clinic" + "}", "$clinic").replace("{" + "clientGroup" + "}", "$clientGroup"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
