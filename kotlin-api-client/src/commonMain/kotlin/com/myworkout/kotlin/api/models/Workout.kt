/**
* Myworkout API
* Documentation for Myworkout API 2.  Basic concepts are explained in this section.  # Localization The API supports localization for error messages like validation errors. The preferred way to request language is to set proper `Accept-Language` header, but this can be overriden by adding a `lang` query parameter to the request.  - _Example 1_: `Accept-Language: no` - _Example 2_: `en-GB,en-US;q=0.9,en;q=0.8` 
*
* The version of the OpenAPI document: <%= ENV[\"API_VERSION\"] %>
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.myworkout.kotlin.api.models

import com.myworkout.kotlin.api.models.WorkoutCalculatedEstimates
import com.myworkout.kotlin.api.models.WorkoutExercise
import com.myworkout.kotlin.api.models.WorkoutStage

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 * @param id 
 * @param trashed Is the workout trashed (deleted)
 * @param displayHealthEvaluation Does the user want to display health evaluation for this workout
 * @param healthEvaluationAvailability Can a health estimate be calculated for the workout.
 * @param type 
 * @param activityType 
 * @param source Identifies how the workout has been registered. Manual is based purely on user input, while recorded means it has been captured by the client.
 * @param transmission 
 * @param startedAt iso8601 formatted time of when the exercise was started
 * @param completedAt iso8601 formatted time of when the exercise was completed
 * @param createdAt iso8601 formatted time of when the exercise was stored
 * @param updatedAt iso8601 time of when the exercise or related information was updated
 * @param overlappingId if any workouts share same start and completed dates, then they are grouped with same overlapping id
 * @param title 
 * @param duration seconds
 * @param bodyWeight Weight in kg, precision 5.2
 * @param maxHeartRate The Max heart rate the user had registered at the time of the exercise
 * @param heartRatePeak highest recorded heart rate
 * @param heartRateAvg average heart rate among recorded values
 * @param heartRateMin lowest recorded heart rate
 * @param points 
 * @param pointsWeekGoal The user's goal for the week the exercise was performed in.
 * @param stars 
 * @param stages 
 * @param exercises 
 * @param calculatedEstimates 
 */
@Serializable
data class Workout (
    @SerialName(value = "id") val id: kotlin.String? = null,
    /* Is the workout trashed (deleted) */
    @SerialName(value = "trashed") val trashed: kotlin.Boolean? = null,
    /* Does the user want to display health evaluation for this workout */
    @SerialName(value = "display_health_evaluation") val displayHealthEvaluation: kotlin.Boolean? = null,
    /* Can a health estimate be calculated for the workout. */
    @SerialName(value = "health_evaluation_availability") val healthEvaluationAvailability: Workout.HealthEvaluationAvailability? = null,
    @SerialName(value = "type") val type: Workout.Type? = null,
    @SerialName(value = "activity_type") val activityType: Workout.ActivityType? = null,
    /* Identifies how the workout has been registered. Manual is based purely on user input, while recorded means it has been captured by the client. */
    @SerialName(value = "source") val source: Workout.Source? = null,
    @SerialName(value = "transmission") val transmission: Workout.Transmission? = null,
    /* iso8601 formatted time of when the exercise was started */
    @SerialName(value = "started_at") val startedAt: kotlin.String? = null,
    /* iso8601 formatted time of when the exercise was completed */
    @SerialName(value = "completed_at") val completedAt: kotlin.String? = null,
    /* iso8601 formatted time of when the exercise was stored */
    @SerialName(value = "created_at") val createdAt: kotlin.String? = null,
    /* iso8601 time of when the exercise or related information was updated */
    @SerialName(value = "updated_at") val updatedAt: kotlin.String? = null,
    /* if any workouts share same start and completed dates, then they are grouped with same overlapping id */
    @SerialName(value = "overlapping_id") val overlappingId: kotlin.Int? = null,
    @SerialName(value = "title") val title: kotlin.String? = null,
    /* seconds */
    @SerialName(value = "duration") val duration: kotlin.Int? = null,
    /* Weight in kg, precision 5.2 */
    @SerialName(value = "body_weight") val bodyWeight: kotlin.Double? = null,
    /* The Max heart rate the user had registered at the time of the exercise */
    @SerialName(value = "max_heart_rate") val maxHeartRate: kotlin.Int? = null,
    /* highest recorded heart rate */
    @SerialName(value = "heart_rate_peak") val heartRatePeak: kotlin.Int? = null,
    /* average heart rate among recorded values */
    @SerialName(value = "heart_rate_avg") val heartRateAvg: kotlin.Int? = null,
    /* lowest recorded heart rate */
    @SerialName(value = "heart_rate_min") val heartRateMin: kotlin.Int? = null,
    @SerialName(value = "points") val points: kotlin.Double? = null,
    /* The user's goal for the week the exercise was performed in. */
    @SerialName(value = "points_week_goal") val pointsWeekGoal: kotlin.Double? = null,
    @SerialName(value = "stars") val stars: kotlin.collections.List<kotlin.String>? = null,
    @SerialName(value = "stages") val stages: kotlin.collections.List<WorkoutStage>? = null,
    @SerialName(value = "exercises") val exercises: kotlin.collections.List<WorkoutExercise>? = null,
    @SerialName(value = "calculated_estimates") val calculatedEstimates: WorkoutCalculatedEstimates? = null
) {

    /**
     * Can a health estimate be calculated for the workout.
     * Values: AVAILABLE,INSUFFICIENT_DATA,NOT_APPLICABLE
     */
    @Serializable
    enum class HealthEvaluationAvailability(val value: kotlin.String) {
        @SerialName(value = "available") AVAILABLE("available"),
        @SerialName(value = "insufficient_data") INSUFFICIENT_DATA("insufficient_data"),
        @SerialName(value = "not_applicable") NOT_APPLICABLE("not_applicable");
    }
    /**
     * 
     * Values: OUTDOOR,TREADMILL,WATT_MACHINE,GENERIC,STRENGTH
     */
    @Serializable
    enum class Type(val value: kotlin.String) {
        @SerialName(value = "outdoor") OUTDOOR("outdoor"),
        @SerialName(value = "treadmill") TREADMILL("treadmill"),
        @SerialName(value = "watt_machine") WATT_MACHINE("watt_machine"),
        @SerialName(value = "generic") GENERIC("generic"),
        @SerialName(value = "strength") STRENGTH("strength");
    }
    /**
     * 
     * Values: WALKING,RUNNING,CYCLING,CROSS_COUNTRY_SKIING,SWIMMING,ROWING,OTHER
     */
    @Serializable
    enum class ActivityType(val value: kotlin.String) {
        @SerialName(value = "walking") WALKING("walking"),
        @SerialName(value = "running") RUNNING("running"),
        @SerialName(value = "cycling") CYCLING("cycling"),
        @SerialName(value = "cross_country_skiing") CROSS_COUNTRY_SKIING("cross_country_skiing"),
        @SerialName(value = "swimming") SWIMMING("swimming"),
        @SerialName(value = "rowing") ROWING("rowing"),
        @SerialName(value = "other") OTHER("other");
    }
    /**
     * Identifies how the workout has been registered. Manual is based purely on user input, while recorded means it has been captured by the client.
     * Values: RECORDED,MANUAL,IMPORTED
     */
    @Serializable
    enum class Source(val value: kotlin.String) {
        @SerialName(value = "recorded") RECORDED("recorded"),
        @SerialName(value = "manual") MANUAL("manual"),
        @SerialName(value = "imported") IMPORTED("imported");
    }
    /**
     * 
     * Values: IN_PROGRESS,DONE,UNKNOWN
     */
    @Serializable
    enum class Transmission(val value: kotlin.String) {
        @SerialName(value = "in_progress") IN_PROGRESS("in_progress"),
        @SerialName(value = "done") DONE("done"),
        @SerialName(value = "unknown") UNKNOWN("unknown");
    }
}

