/**
* Myworkout API
* Documentation for Myworkout API 2.  Basic concepts are explained in this section.  # Localization The API supports localization for error messages like validation errors. The preferred way to request language is to set proper `Accept-Language` header, but this can be overriden by adding a `lang` query parameter to the request.  - _Example 1_: `Accept-Language: no` - _Example 2_: `en-GB,en-US;q=0.9,en;q=0.8` 
*
* The version of the OpenAPI document: <%= ENV[\"API_VERSION\"] %>
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.myworkout.kotlin.api.apis

import com.myworkout.kotlin.api.models.Device
import com.myworkout.kotlin.api.models.Error
import com.myworkout.kotlin.api.models.GetUserSettingsResponse
import com.myworkout.kotlin.api.models.InlineResponse201
import com.myworkout.kotlin.api.models.InlineResponse2011
import com.myworkout.kotlin.api.models.PutUserSettingsInput
import com.myworkout.kotlin.api.models.PutUserSettingsResponse
import com.myworkout.kotlin.api.models.SharedEvaluationResponse
import com.myworkout.kotlin.api.models.UpdateUserInput
import com.myworkout.kotlin.api.models.UserPurchasesInput
import com.myworkout.kotlin.api.models.UserResponse
import com.myworkout.kotlin.api.models.UserSubscriptionInput

import com.myworkout.kotlin.api.infrastructure.*
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

class UserApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    jsonSerializer: Json
) : ApiClient(baseUrl, httpClientEngine, jsonSerializer) {

    /**
     * Stores device token for the user
     * Through this endpoint you can store device token for logged user . 
     * @param device  
     * @return InlineResponse201
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun bioAgeAppUserMeDevicesPost(device: Device): HttpResponse<InlineResponse201> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = device

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/bio-age-app/user/me/devices",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Submit new mobile purchased receipt
     * This url validate and store subscription based on sent receipt 
     * @param userPurchasesInput  
     * @return void
     */
    suspend fun bioAgeAppUserMePurchasesPost(userPurchasesInput: UserPurchasesInput): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = userPurchasesInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/bio-age-app/user/me/purchases",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Submit new subscription trial
     * This endpoint is now used only used for trial activation. Processing in-app purchases has moved to /bio-age-app/user/me/purchases 
     * @param userSubscriptionInput  
     * @return InlineResponse2011
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun bioAgeAppUserMeSubscriptionsPost(userSubscriptionInput: UserSubscriptionInput): HttpResponse<InlineResponse2011> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = userSubscriptionInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/bio-age-app/user/me/subscriptions",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param key  
     * @return void
     */
    suspend fun deleteUserSetting(key: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/me/settings/{key}".replace("{" + "key" + "}", "$key"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Return the logged in user
     * 
     * @return UserResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getMyUser(): HttpResponse<UserResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/bio-age-app/user/me",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param hash A hash identifying a shared evaluation 
     * @return SharedEvaluationResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getSharedEvaluation(hash: kotlin.String): HttpResponse<SharedEvaluationResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/me/shared-evaluations/{hash}".replace("{" + "hash" + "}", "$hash"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return GetUserSettingsResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getUserSettings(): HttpResponse<GetUserSettingsResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/me/settings",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Updates user or usermeta
     * 
     * @param updateUserInput  (optional)
     * @return UserResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun updateMyUser(updateUserInput: UpdateUserInput?): HttpResponse<UserResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = updateUserInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/bio-age-app/user/me",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param key  
     * @param putUserSettingsInput  (optional)
     * @return PutUserSettingsResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun updateOrCreateUserSetting(key: kotlin.String, putUserSettingsInput: PutUserSettingsInput?): HttpResponse<PutUserSettingsResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = putUserSettingsInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/me/settings/{key}".replace("{" + "key" + "}", "$key"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Check if a user exists
     * 
     * @param email  (optional)
     * @return void
     */
    suspend fun userExists(email: kotlin.String?): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        email?.apply { localVariableQuery["email"] = listOf("$email") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/users",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
