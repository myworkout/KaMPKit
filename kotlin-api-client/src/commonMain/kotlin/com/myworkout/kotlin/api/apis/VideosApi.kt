/**
* Myworkout API
* Documentation for Myworkout API 2.  Basic concepts are explained in this section.  # Localization The API supports localization for error messages like validation errors. The preferred way to request language is to set proper `Accept-Language` header, but this can be overriden by adding a `lang` query parameter to the request.  - _Example 1_: `Accept-Language: no` - _Example 2_: `en-GB,en-US;q=0.9,en;q=0.8` 
*
* The version of the OpenAPI document: <%= ENV[\"API_VERSION\"] %>
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.myworkout.kotlin.api.apis

import com.myworkout.kotlin.api.models.VideoCategoryResponse
import com.myworkout.kotlin.api.models.VideoCollectionResponse

import com.myworkout.kotlin.api.infrastructure.*
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

class VideosApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    jsonSerializer: Json
) : ApiClient(baseUrl, httpClientEngine, jsonSerializer) {

    /**
     * Get video categories
     * 
     * @return VideoCategoryResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getVideoCategories(): HttpResponse<VideoCategoryResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/video-categories",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get exercise videos
     * 
     * @param type Filter the kind of videos to receive. Workout gives you videos you can exercise to, while educational gives you videos that are educational. 
     * @param lang Filter videos by language (optional)
     * @param categoryId Optional filter by one or more categories. See /video-categories resource for valid options. (optional)
     * @param trainerId Optional filter by one or more trainers. See /trainers resource for valid options. (optional)
     * @param limit Limit the number of videos to fetch to the given number and use pagination (optional)
     * @param offset What position should the result start from in a paginated result (optional)
     * @return VideoCollectionResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getVideos(type: kotlin.String, lang: kotlin.collections.List<kotlin.String>?, categoryId: kotlin.collections.List<kotlin.Int>?, trainerId: kotlin.collections.List<kotlin.Int>?, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<VideoCollectionResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        type?.apply { localVariableQuery["type"] = listOf("$type") }
        lang?.apply { localVariableQuery["lang"] = toMultiValue(this, "multi") }
        categoryId?.apply { localVariableQuery["category_id"] = toMultiValue(this, "multi") }
        trainerId?.apply { localVariableQuery["trainer_id"] = toMultiValue(this, "multi") }
        limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
        offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/videos",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


}
