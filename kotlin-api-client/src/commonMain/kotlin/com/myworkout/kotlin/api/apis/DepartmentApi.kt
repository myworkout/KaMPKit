/**
* Myworkout API
* Documentation for Myworkout API 2.  Basic concepts are explained in this section.  # Localization The API supports localization for error messages like validation errors. The preferred way to request language is to set proper `Accept-Language` header, but this can be overriden by adding a `lang` query parameter to the request.  - _Example 1_: `Accept-Language: no` - _Example 2_: `en-GB,en-US;q=0.9,en;q=0.8` 
*
* The version of the OpenAPI document: <%= ENV[\"API_VERSION\"] %>
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.myworkout.kotlin.api.apis

import com.myworkout.kotlin.api.models.CreateOrganizationDepartmentInput
import com.myworkout.kotlin.api.models.CreateOrganizationDepartmentMemberInput
import com.myworkout.kotlin.api.models.CreateOrganizationDepartmentMemberResponse
import com.myworkout.kotlin.api.models.CreateOrganizationDepartmentResponse
import com.myworkout.kotlin.api.models.Error
import com.myworkout.kotlin.api.models.GetOrganizationDepartmentMembersResponse
import com.myworkout.kotlin.api.models.GetOrganizationDepartmentsResponse
import com.myworkout.kotlin.api.models.UpdateOrganizationDepartmentInput
import com.myworkout.kotlin.api.models.UpdateOrganizationDepartmentMemberInput
import com.myworkout.kotlin.api.models.UpdateOrganizationDepartmentMemberResponse
import com.myworkout.kotlin.api.models.UpdateOrganizationDepartmentResponse

import com.myworkout.kotlin.api.infrastructure.*
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

class DepartmentApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    jsonSerializer: Json
) : ApiClient(baseUrl, httpClientEngine, jsonSerializer) {

    /**
     * Add a department to the organization
     * 
     * @param organizationUuid  
     * @param createOrganizationDepartmentInput  
     * @return CreateOrganizationDepartmentResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun createOrganizationDepartment(organizationUuid: kotlin.String, createOrganizationDepartmentInput: CreateOrganizationDepartmentInput): HttpResponse<CreateOrganizationDepartmentResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = createOrganizationDepartmentInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/organizations/{organizationUuid}/departments".replace("{" + "organizationUuid" + "}", "$organizationUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Assigns a department to the member of the organization
     * 
     * @param organizationUuid  
     * @param departmentUuid  
     * @param createOrganizationDepartmentMemberInput  
     * @return CreateOrganizationDepartmentMemberResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun createOrganizationDepartmentMember(organizationUuid: kotlin.String, departmentUuid: kotlin.String, createOrganizationDepartmentMemberInput: CreateOrganizationDepartmentMemberInput): HttpResponse<CreateOrganizationDepartmentMemberResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = createOrganizationDepartmentMemberInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/organizations/{organizationUuid}/departments/{departmentUuid}/members".replace("{" + "organizationUuid" + "}", "$organizationUuid").replace("{" + "departmentUuid" + "}", "$departmentUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Get members of the department of the organization
     * 
     * @param organizationUuid  
     * @param departmentUuid  
     * @return GetOrganizationDepartmentMembersResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getOrganizationDepartmentMembers(organizationUuid: kotlin.String, departmentUuid: kotlin.String): HttpResponse<GetOrganizationDepartmentMembersResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/organizations/{organizationUuid}/departments/{departmentUuid}/members".replace("{" + "organizationUuid" + "}", "$organizationUuid").replace("{" + "departmentUuid" + "}", "$departmentUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Get departments of the organization
     * 
     * @param organizationUuid  
     * @return GetOrganizationDepartmentsResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getOrganizationDepartments(organizationUuid: kotlin.String): HttpResponse<GetOrganizationDepartmentsResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/organizations/{organizationUuid}/departments".replace("{" + "organizationUuid" + "}", "$organizationUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Update department of the organization
     * 
     * @param organizationUuid  
     * @param departmentUuid  
     * @param updateOrganizationDepartmentInput  
     * @return UpdateOrganizationDepartmentResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun updateOrganizationDepartment(organizationUuid: kotlin.String, departmentUuid: kotlin.String, updateOrganizationDepartmentInput: UpdateOrganizationDepartmentInput): HttpResponse<UpdateOrganizationDepartmentResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = updateOrganizationDepartmentInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PATCH,
            "/organizations/{organizationUuid}/departments/{departmentUuid}".replace("{" + "organizationUuid" + "}", "$organizationUuid").replace("{" + "departmentUuid" + "}", "$departmentUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * Update the department member of the organization
     * 
     * @param organizationUuid  
     * @param departmentUuid  
     * @param memberId  
     * @param updateOrganizationDepartmentMemberInput  
     * @return UpdateOrganizationDepartmentMemberResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun updateOrganizationDepartmentMember(organizationUuid: kotlin.String, departmentUuid: kotlin.String, memberId: kotlin.Int, updateOrganizationDepartmentMemberInput: UpdateOrganizationDepartmentMemberInput): HttpResponse<UpdateOrganizationDepartmentMemberResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = updateOrganizationDepartmentMemberInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PATCH,
            "/organizations/{organizationUuid}/departments/{departmentUuid}/members/{memberId}".replace("{" + "organizationUuid" + "}", "$organizationUuid").replace("{" + "departmentUuid" + "}", "$departmentUuid").replace("{" + "memberId" + "}", "$memberId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
