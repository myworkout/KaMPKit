/**
* Myworkout API
* Documentation for Myworkout API 2.  Basic concepts are explained in this section.  # Localization The API supports localization for error messages like validation errors. The preferred way to request language is to set proper `Accept-Language` header, but this can be overriden by adding a `lang` query parameter to the request.  - _Example 1_: `Accept-Language: no` - _Example 2_: `en-GB,en-US;q=0.9,en;q=0.8` 
*
* The version of the OpenAPI document: <%= ENV[\"API_VERSION\"] %>
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.myworkout.kotlin.api.apis

import com.myworkout.kotlin.api.models.Error
import com.myworkout.kotlin.api.models.GetTeamContestsResponse
import com.myworkout.kotlin.api.models.GetTeamInviteTokenDataResponse
import com.myworkout.kotlin.api.models.GetTeamMembersResponse
import com.myworkout.kotlin.api.models.GetTeamsResponse
import com.myworkout.kotlin.api.models.GetUserTeamMembersResponse
import com.myworkout.kotlin.api.models.SendTeamInviteAsSmsInput
import com.myworkout.kotlin.api.models.UpdateTeamMembersInput

import com.myworkout.kotlin.api.infrastructure.*
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

class TeamApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    jsonSerializer: Json
) : ApiClient(baseUrl, httpClientEngine, jsonSerializer) {

    /**
     * 
     * 
     * @param token  
     * @return void
     */
    suspend fun acceptTeamInvite(token: kotlin.String): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/teams/invites/{token}".replace("{" + "token" + "}", "$token"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param token  
     * @return GetTeamInviteTokenDataResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getTeamInviteTokenData(token: kotlin.String): HttpResponse<GetTeamInviteTokenDataResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/teams/invites/{token}".replace("{" + "token" + "}", "$token"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param teamUuid  
     * @return GetTeamMembersResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getTeamMembers(teamUuid: kotlin.String): HttpResponse<GetTeamMembersResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/teams/{teamUuid}/members".replace("{" + "teamUuid" + "}", "$teamUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param teamId  
     * @return GetTeamContestsResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getUserTeamContests(teamId: kotlin.String): HttpResponse<GetTeamContestsResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/me/teams/{teamId}/contests".replace("{" + "teamId" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @param teamId  
     * @return GetUserTeamMembersResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getUserTeamMembers(teamId: kotlin.String): HttpResponse<GetUserTeamMembersResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/me/teams/{teamId}/members".replace("{" + "teamId" + "}", "$teamId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * 
     * 
     * @return GetTeamsResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun getUserTeams(): HttpResponse<GetTeamsResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/me/teams",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
     * Sends the invite corresponding to the invite token to the provided phone number
     * 
     * @param token  
     * @param sendTeamInviteAsSmsInput  (optional)
     * @return void
     */
    suspend fun sendTeamInviteAsSms(token: kotlin.String, sendTeamInviteAsSmsInput: SendTeamInviteAsSmsInput?): HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = sendTeamInviteAsSmsInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/teams/invites/{token}/invite-sms".replace("{" + "token" + "}", "$token"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    /**
     * 
     * 
     * @param teamUuid  
     * @param updateTeamMembersInput  (optional)
     * @return GetTeamMembersResponse
     */
    @Suppress("UNCHECKED_CAST")
    suspend fun updateTeamMembers(teamUuid: kotlin.String, updateTeamMembersInput: UpdateTeamMembersInput?): HttpResponse<GetTeamMembersResponse> {

        val localVariableAuthNames = listOf<String>("JWTAuth", "OAuth2", "OAuth2")

        val localVariableBody = updateTeamMembersInput

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.PATCH,
            "/teams/{teamUuid}/members".replace("{" + "teamUuid" + "}", "$teamUuid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



}
