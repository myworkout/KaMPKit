/**
* Myworkout API
* Documentation for Myworkout API 2.  Basic concepts are explained in this section.  # Localization The API supports localization for error messages like validation errors. The preferred way to request language is to set proper `Accept-Language` header, but this can be overriden by adding a `lang` query parameter to the request.  - _Example 1_: `Accept-Language: no` - _Example 2_: `en-GB,en-US;q=0.9,en;q=0.8` 
*
* The version of the OpenAPI document: <%= ENV[\"API_VERSION\"] %>
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.myworkout.kotlin.api.models

import com.myworkout.kotlin.api.models.OrganizationMemberDepartment

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * 
 * @param id 
 * @param userId 
 * @param userUuid 
 * @param name Name of the invited user
 * @param email E-mail the user was invited to organization with
 * @param userEmail Masked e-mail the user is using to login with
 * @param phone Phone number the user was invited with
 * @param isAdmin Flag to determine if the user can administrate the organization
 * @param permissionsStatus 
 * @param verified True if it is verified that the user belongs to the organization. Verification is either done manually by an administrator or by joining the organization with a personal invite.
 * @param createdAt ISO8601 time of when the member was invited/created
 * @param department 
 */
@Serializable
data class OrganizationMember (
    @SerialName(value = "id") val id: kotlin.Int? = null,
    @SerialName(value = "user_id") val userId: kotlin.Int? = null,
    @SerialName(value = "user_uuid") val userUuid: kotlin.String? = null,
    /* Name of the invited user */
    @SerialName(value = "name") val name: kotlin.String? = null,
    /* E-mail the user was invited to organization with */
    @SerialName(value = "email") val email: kotlin.String? = null,
    /* Masked e-mail the user is using to login with */
    @SerialName(value = "user_email") val userEmail: kotlin.String? = null,
    /* Phone number the user was invited with */
    @SerialName(value = "phone") val phone: kotlin.String? = null,
    /* Flag to determine if the user can administrate the organization */
    @SerialName(value = "is_admin") val isAdmin: kotlin.Boolean? = null,
    @SerialName(value = "permissions_status") val permissionsStatus: OrganizationMember.PermissionsStatus? = null,
    /* True if it is verified that the user belongs to the organization. Verification is either done manually by an administrator or by joining the organization with a personal invite. */
    @SerialName(value = "verified") val verified: kotlin.Boolean? = null,
    /* ISO8601 time of when the member was invited/created */
    @SerialName(value = "created_at") val createdAt: kotlin.String? = null,
    @SerialName(value = "department") val department: OrganizationMemberDepartment? = null
) {

    /**
     * 
     * Values: ACCEPTED,REJECTED,PENDING
     */
    @Serializable
    enum class PermissionsStatus(val value: kotlin.String) {
        @SerialName(value = "accepted") ACCEPTED("accepted"),
        @SerialName(value = "rejected") REJECTED("rejected"),
        @SerialName(value = "pending") PENDING("pending");
    }
}

